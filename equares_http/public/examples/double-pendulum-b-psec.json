{"boxes":[{"name":"odeParam","info":{"inputs":[],"outputs":[{"name":"output","help":"Parameter data; port format is determined by peer","pos":3.5}]},"type":"Param","props":{"data":{"value":{"l1":1,"m1":1,"l2":0.6,"m2":1,"g":9.8}}},"status":{"level":"ok","text":"Ok"},"x":111.671875,"y":94},{"name":"solverParam","info":{"inputs":[],"outputs":[{"name":"output","help":"Parameter data; port format is determined by peer","pos":3.5}]},"type":"Param","props":{"data":{"value":{"h":0.002,"n":0,"nout":1}}},"status":{"level":"ok","text":"Ok"},"x":259.671875,"y":95},{"name":"initState","info":{"inputs":[],"outputs":[{"name":"output","help":"Parameter data; port format is determined by peer","pos":3.5}]},"type":"Param","props":{"data":{"value":{"q1":0.17,"q2":0.17,"dq1":0,"dq2":0,"t":0}}},"status":{"level":"ok","text":"Ok"},"x":425.671875,"y":95},{"name":"ode","info":{"inputs":[{"name":"parameters","format":[5],"help":"Parameters of ODE system","hints":["l1","m1","l2","m2","g"],"pos":1.5},{"name":"state","format":[5],"help":"State variables of ODE system, including the time","hints":["q1","q2","dq1","dq2","t"],"pos":0.7}],"outputs":[{"name":"oderhs","format":[4],"help":"Right hand side of ODE system","pos":0.3}]},"type":"CxxOde","props":{"src":{"value":"struct DoublePendulum {\n    int paramCount() const {\n        return 5;   // l1, m1, l2, m2, g\n    }\n    const char *paramNames() const {\n        return \"l1, m1, l2, m2, g\";\n    }\n    int varCount() const {\n        return 4;   // q1, q2, dq1, dq2\n    }\n    const char *varNames() const {\n        return \"q1, q2, dq1, dq2\";\n    }\n\n    // Auxiliary parameters\n    double\n        L1,\n        M1,\n        L2,\n        M2,\n        G,\n        L12,\n        L22,\n        L12m,\n        L22m,\n        L1mg,\n        L2mg;\n    void prepare(const double *param) {\n        L1 = param[0];\n        M1 = param[1];\n        L2 = param[2];\n        M2 = param[3];\n        G = param[4];\n        L12 = L1*L1;\n        L22 = L2*L2;\n        L12m = L12*M1;\n        L22m = L22*M2;\n        L1mg = L1*M1*G;\n        L2mg = L2*M2*G;\n    }\n\n    void rhs(double *out, const double *param, const double *state) const {\n        out[0] = state[2];\n        out[1] = state[3];\n\tdouble\n            phi = state[0],\n            psi = state[1],\n            dphi = state[2],\n            dpsi = state[3],\n            sphi = sin(phi),\n            spsi = sin(psi),\n            cphi = cos(phi),\n            cpsi = cos(psi),\n\n            c = L1+L2*cpsi,\n\n            aphi = L12m + M2*c*c,\n            daphi = -2*M2*c*L2*dpsi*spsi,\n\n            fphi = -daphi*dphi - G*sphi*((M1+M2)*L1 + M2*L2*cpsi),\n            ddpsi = (-c*spsi*dphi*dphi - G*cphi*spsi)/L2;\n\tout[2] = fphi/aphi;\n\tout[3] = ddpsi;\n    }\n};\n"},"srcExample":{"value":"struct pendulum {\r\n    int paramCount() const {\r\n        return 2;       // l, g\r\n    }\r\n    const char *paramNames() const {\r\n        return \"l,g\";   // Can also return empty string or null ptr\r\n    }\r\n    int varCount() const {\r\n        return 2;       // q, dq\r\n    }\r\n    const char *varNames() const {\r\n        return \"q,dq\";  // Can also return empty string or null ptr\r\n    }\r\n\r\n    // Auxiliary parameters\r\n    double g_l;\r\n    void prepare(const double *param) {\r\n        g_l = param[1]/param[0];\r\n    }\r\n\r\n    void rhs(double *out, const double *param, const double *state) const {\r\n        out[0] = state[1];\r\n        out[1] = -g_l * sin(state[0]);\r\n    }\r\n};\r\n"},"useQmake":{"value":true}},"status":{"level":"ok","text":"Ok"},"x":134.671875,"y":189},{"name":"solver","info":{"inputs":[{"name":"parameters","format":[3],"help":"Time step, number of integration steps to take (0 means infinite), number of steps between outputs (0 means output final state only)","hints":["h","n","nout"],"pos":1.7},{"name":"initState","help":"Initial state for the ODE system","pos":1.3},{"name":"rhs","help":"Right hand side of the ODE system","pos":2.7},{"name":"stop","help":"Any data on this port causes solver to terminate","pos":0.5}],"outputs":[{"name":"nextState","help":"Next state of the ODE system","pos":3.7},{"name":"rhsState","help":"System state to pass to the ODE right hand side calculator","pos":2.3},{"name":"finish","format":[0],"help":"Data is emitted to this port as soon as the integration finishes","pos":3.3}]},"type":"Rk4","props":{},"status":{"level":"ok","text":"Ok"},"x":347.671875,"y":188},{"name":"canvas","info":{"inputs":[{"name":"input","format":[2],"help":"2D input for canvas","pos":1.3},{"name":"flush","help":"Any incoming signal on this port causes this canvas to flush its data (i.e., pass the entire canvas data to the output port)","pos":1.7}],"outputs":[{"name":"output","format":[100,100],"help":"Canvas output (each data point is a 2D array of canvas cell data)","pos":3.5}]},"type":"Canvas","props":{"param":{"value":{"x":{"vmin":-1.570796327,"vmax":1.570796327,"resolution":500},"y":{"vmin":-6.283185307,"vmax":5.654866776,"resolution":500}}},"refreshInterval":{"value":1000}},"status":{"level":"ok","text":"Ok"},"x":345.671875,"y":398},{"name":"bitmap","info":{"inputs":[{"name":"input","help":"2D input for bitmap","pos":1.5}],"outputs":[]},"type":"Bitmap","props":{"fileName":{"value":"result.png"}},"status":{"level":"ok","text":"Ok"},"x":347.671875,"y":472},{"name":"projection","info":{"inputs":[{"name":"input","help":"Incoming points (each point is a vector)","pos":1.5}],"outputs":[{"name":"output","format":[0],"help":"Point projections onto hyperplane determined by the 'indices' property","pos":3.5}]},"type":"Projection","props":{"indices":{"value":[0,2]}},"status":{"level":"ok","text":"Ok"},"x":388.671875,"y":328},{"name":"counterParam","info":{"inputs":[],"outputs":[{"name":"output","help":"Parameter data; port format is determined by peer","pos":3.5}]},"type":"Param","props":{"data":{"value":{"count":10000000}}},"status":{"level":"ok","text":"Ok"},"x":618.65625,"y":304},{"name":"psec","info":{"inputs":[{"name":"input","help":"Trajectory points","pos":1.5}],"outputs":[{"name":"output","help":"Trajectory cross-section points","pos":3.5}]},"type":"CrossSection","props":{"param":{"value":{"index":1,"pos":0,"flags":["positive"]}}},"status":{"level":"ok","text":"Ok"},"x":406.65625,"y":258},{"name":"counter","info":{"inputs":[{"name":"count","format":[1],"help":"Counter value for the filter","hints":["count"],"pos":0.5},{"name":"input","help":"Incoming points","pos":2.5}],"outputs":[{"name":"output","help":"Filtered points","pos":1.5}]},"type":"CountedFilter","props":{},"status":{"level":"ok","text":"Ok"},"x":549.65625,"y":359}],"links":[{"source":{"box":"solverParam","port":"output"},"target":{"box":"solver","port":"parameters"}},{"source":{"box":"solver","port":"initState"},"target":{"box":"initState","port":"output"}},{"source":{"box":"solver","port":"finish"},"target":{"box":"canvas","port":"flush"}},{"source":{"box":"canvas","port":"output"},"target":{"box":"bitmap","port":"input"}},{"source":{"box":"projection","port":"output"},"target":{"box":"canvas","port":"input"}},{"source":{"box":"solver","port":"nextState"},"target":{"box":"psec","port":"input"}},{"source":{"box":"psec","port":"output"},"target":{"box":"projection","port":"input"}},{"source":{"box":"counter","port":"input"},"target":{"box":"projection","port":"output"}},{"source":{"box":"solver","port":"stop"},"target":{"box":"counter","port":"output"}},{"source":{"box":"counterParam","port":"output"},"target":{"box":"counter","port":"count"}},{"source":{"box":"ode","port":"parameters"},"target":{"box":"odeParam","port":"output"}},{"source":{"box":"ode","port":"state"},"target":{"box":"solver","port":"rhsState"}},{"source":{"box":"ode","port":"oderhs"},"target":{"box":"solver","port":"rhs"}}],"name":"double-pendulum-b-psec","description":"Double pendulum b, Poincare map"}